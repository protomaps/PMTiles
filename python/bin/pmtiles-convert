#!/usr/bin/env python

# pmtiles to files
import argparse
import os
import shutil

from pmtiles.convert import mbtiles_to_pmtiles, pmtiles_to_mbtiles, pmtiles_to_dir, disk_to_pmtiles

parser = argparse.ArgumentParser(
    description="Convert between PMTiles and other archive formats."
)
parser.add_argument("input", help="Input .mbtiles, .pmtiles, or directory")
parser.add_argument("output", help="Output .mbtiles, .pmtiles, or directory")
parser.add_argument(
    "--maxzoom", help="The maximum zoom level to include in the output. Set to 'auto' when converting from directory to use the highest zoom."
)
parser.add_argument(
    "--overwrite", help="Overwrite the existing output.", action="store_true"
)
parser.add_argument(
    "--scheme", help="Tiling scheme of the input directory ('ags', 'gwc', 'zyx', 'zxy' (default))."
)
parser.add_argument(
    "--image_format", help="Image format of tiles in the input directory if not given in the metadata ('png', 'jpeg', 'pbf', 'webp', 'avif')."
)
parser.add_argument(
    "--verbose", help="Print progress when converting a directory to .pmtiles.", action="store_true"
)
args = parser.parse_args()

if os.path.exists(args.output) and not args.overwrite:
    print("Output exists, use --overwrite to overwrite the output.")
    exit(1)
if args.overwrite:
    if os.path.isfile(args.output):
        os.remove(args.output)
    elif os.path.isdir(args.output):
        shutil.rmtree(args.output)

if args.input.endswith(".mbtiles") and args.output.endswith(".pmtiles"):
    print("Notice: check out the new PMTiles converter at https://github.com/protomaps/go-pmtiles")
    mbtiles_to_pmtiles(args.input, args.output, args.maxzoom)

elif args.input.endswith(".pmtiles") and args.output.endswith(".mbtiles"):
    pmtiles_to_mbtiles(args.input, args.output)

elif args.input.endswith(".pmtiles"):
    pmtiles_to_dir(args.input, args.output)

elif args.output.endswith(".pmtiles"):
    disk_to_pmtiles(args.input, args.output, args.maxzoom, args.scheme, args.image_format, args.verbose)

else:
    print("Conversion not implemented")
